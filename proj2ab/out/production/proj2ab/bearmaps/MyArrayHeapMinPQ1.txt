public class ArrayHeapMinPQ<T> implements ExtrinsicMinPQ<T>  {
    public ArrayList<PriorityNode> heap;
    private int size = 0;
    public HashMap<T,Integer> items;
    public ArrayList<T> position = new ArrayList<>();

    public ArrayHeapMinPQ(){
        heap = new ArrayList<>();
        items = new HashMap<>();
        PriorityNode p = new PriorityNode(null,0.0);
        heap.add(p);
        items.put(null,0);
        position.add(null);
        size = 0;
    }

    public class PriorityNode implements Comparable<PriorityNode> {
        private T item;
        private double priority;

        PriorityNode(T e, double p) {
            this.item = e;
            this.priority = p;
        }

        T getItem() {
            return item;
        }

        double getPriority() {
            return priority;
        }

        void setPriority(double priority) {
            this.priority = priority;
        }

        @Override
        public int compareTo(PriorityNode other) {
            if (other == null) {
                return -1;
            }
            return Double.compare(this.getPriority(), other.getPriority());
        }

        @Override
        @SuppressWarnings("unchecked")
        public boolean equals(Object o) {
            if (o == null || o.getClass() != this.getClass()) {
                return false;
            } else {
                return ((PriorityNode) o).getItem().equals(getItem());
            }
        }
        @Override
        public int hashCode() {
            return item.hashCode();
        }
    }


    /* Adds an item with the given priority value. Throws an
     * IllegalArgumentExceptionb if item is already present.
     * You may assume that item is never null. */
    @Override
    public void add(T item, double priority){
        PriorityNode pNode = new PriorityNode(item,priority);
        size += 1;
        /* firstly add pnode to the last position then swim up to the right place*/
        position.add(item);
        heap.add(size,pNode);
        items.put(item,size);
        swim(size);
    }

    /* return the index of k's parent in the heap*/
    public int parent(int k){
        return k/2;
    }
    /* return the index of k's leftchild in the heap*/
    public int leftchild(int k){
        return 2*k;
    }
    /* return the index of k's rightchild in the heap*/
    public int rightchild(int k){
        return 2*k+1;
    }

    /* swap x,y*/
    public void swap(int x, int y){
        /* change the position*/
        Collections.swap(position, x, y);
        Collections.swap(heap,x,y);
    }

    /* when we add an item we add it to the end first and then swim up*/
    public void swim(int k){

        /* decide if  heap[k].priority < heap[parent(k)].priority  swap*/
        if(heap.get(k).priority < heap.get(parent(k)).priority){
            swap(k,parent(k));
            /* 需要改变 item 的 index*/
            swim(parent(k));
        }
    }



    /* when we remove an item we put the end to the first and then sink down*/
    public void sink(int k){
        /* four situation
         *1) k doesn't have child -> end
         *2) k has one left child
                bigger or smaller than k
         3) k has one right child
               bigger or smaller than k
         4) k has two children
                4.1) both children are smaller than k
                4.2,4.3) left or right is smaller than k
                4.4) both children are bigger than k
        * */
        int leftchildindex = leftchild(k);
        int rightchildindex = rightchild(k);
        if(leftchildindex >size && rightchildindex>size){
            return;
        } else if(leftchildindex<=size && rightchildindex>size){
                    /* k > leftchild sink left*/
                   if(heap.get(k).priority > heap.get(leftchild(k)).priority){
                       swap(k,leftchild(k));
                       sink(leftchild(k));
                   } else{
                       return;
                   }

        } else if(leftchildindex>size && rightchildindex<=size){
            /* k > rightchild sink right*/
            if(heap.get(k).priority > heap.get(rightchild(k)).priority){
                swap(k,rightchild(k));
                sink(rightchild(k));
            } else{
                return;
            }
        } else{
            boolean biggerThanleftChild = heap.get(k).priority > heap.get(leftchild(k)).priority;
            boolean biggerThanrightChild = heap.get(k).priority > heap.get(rightchild(k)).priority;

            if((!biggerThanleftChild) &&(!biggerThanrightChild)){
                return;
            }
            /* > left and <= right*/
            if(biggerThanleftChild && !biggerThanrightChild){
                swap(k,leftchild(k));
                sink(leftchild(k));
            }
            /* >right and <=left*/
            if(biggerThanrightChild && !biggerThanleftChild){
                swap(k,rightchild(k));
                sink(rightchild(k));
            }
            if(biggerThanleftChild && biggerThanrightChild){
                /* 对比 leftchid 和 rightchild ,那个小，就和k 交换*/
                /* left = right*/
                if(heap.get(leftchild(k)).priority == heap.get(rightchild(k)).priority){
                    double chance = Math.random();
                    if(chance>0.5){
                        swap(k,leftchild(k));
                        sink(leftchild(k));
                    } else{
                        swap(k,rightchild(k));
                        sink(rightchild(k));
                    }
                }
                /* left bigger than right*/
                else if(heap.get(leftchild(k)).priority > heap.get(rightchild(k)).priority){
                    swap(k,rightchild(k));
                    sink(rightchild(k));
                } else {/* left smaller than right*/
                    swap(k,leftchild(k));
                    sink(leftchild(k));
                }
            }
        }
    }


    /* Returns true if the PQ contains the given item. */
    @Override
    public boolean contains(T item){
        if(item == null){
            return false;
        }
        return items.containsKey(item);
    }



    /* Returns the minimum item. Throws NoSuchElementException if the PQ is empty. */
    @Override
    public T getSmallest(){
        if(size == 0){
            throw  new NoSuchElementException();
        }
        return heap.get(1).item;
    }
    /* Removes and returns the minimum item. Throws NoSuchElementException if the PQ is empty. */
    @Override
    public T removeSmallest(){
        if(size == 0){
            throw  new NoSuchElementException();
        }
        T small = heap.get(1).item;
        /* swap last one with the first one*/
        swap(1,size);
        /* delete last one*/
        heap.remove(size);
        position.remove(size);
        size -= 1;
        /* sink the first one down to its right place*/
        sink(1);
        items.remove(small);
        return small;
    }



    /* Returns the number of items in the PQ. */
    @Override
    public int size(){
        return size;
    }


    /* Changes the priority of the given item. Throws NoSuchElementException if the item
     * doesn't exist. */

    @Override
    public void changePriority(T item, double priority){
        if(!contains(item)){
            throw new NoSuchElementException();
        }
        int index = position.indexOf(item);
        /* get the index of the item in the heap*/
        double oldpriority = heap.get(index).priority;
        PriorityNode p = heap.get(index);
        p.priority = priority;
        if(oldpriority>=priority){
            swim(index);
        } else{
            sink(index);
        }
    }

    public void printitems(){
        for(int i=0;i<position.size();i++){
            System.out.println(position.get(i));
        }
    }

    public void printheap(){
        for(PriorityNode p:heap){
            System.out.println(p.item);
        }
    }

    public static void main(String[] args){

    }


}
